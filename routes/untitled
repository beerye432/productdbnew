
Cells:

explain analyze select orders.user_id, sum(orders.price) as total from orders where orders.user_id = 1 and orders.product_id = 1 group by orders.user_id union select orders.user_id, 0 as total from orders where not exists(select * from orders where orders.user_id = 1 and orders.product_id = 1) and orders.user_id = 1 group by orders.user_id;

Users, people:

explain analyze select users.id as id, users.name as name, case when users.id = orders.user_id then sum(orders.price) else 0 end as total from users left outer join orders on orders.user_id = users.id, categories, products where products.id = orders.product_id and products.category_id = categories.id and categories.name LIKE '%%' group by users.id, users.name, orders.user_id union select users.id as id, users.name as name, 0 as total from users where not exists(select orders.id from orders, products, categories where orders.user_id = users.id and orders.product_id = products.id and categories.id = products.category_id and categories.name LIKE '%%') group by users.id, users.name order by total desc offset 0 rows fetch next 20 rows only;

users, states: 

explain analyze select state as name, case when users.state = state then sum(orders.price) else 0 end as total from users left outer join orders on users.id = orders.user_id, categories, products where orders.product_id = products.id and categories.id = products.category_id and categories.name LIKE '%%' group by state union select state, 0 as total from users where not exists (select * from orders, products, categories where users.id = orders.user_id and orders.product_id = products.id and products.category_id = categories.id and categories.name like '%%') group by state order by total desc offset 0 rows fetch next 20 rows only;


Products:

explain analyze select products.id as id, products.name as name, case when products.id = orders.product_id then sum(orders.price) else 0 end as total from products left outer join orders on products.id = orders.product_id, categories where categories.id = products.category_id and categories.name LIKE '%%' group by products.id, products.name, orders.product_id order by total DESC offset 0 rows fetch next 10 rows only;

Sim: 

select p1.name as p1, p2.name as p2, (sum((o1.price)*(o2.price)))/(sum(o4.price)*sum(o3.price)) as diff 
from orders o1, orders o2, orders o3, orders o4, products p1, products p2, users u1, users u2
where o1.user_id = u1.id
AND u1.id = u2.id
AND o2.user_id = u2.id
AND o1.product_id = p1.id
AND o2.product_id = p2.id
AND o3.product_id = p1.id
AND o4.product_id = p2.id
AND o1.id > o2.id
group by p1.name, p2.name 
order by diff DESC 
OFFSET 0 ROWS 
FETCH NEXT 100 ROWS ONLY;

AND u1.id = u2.id